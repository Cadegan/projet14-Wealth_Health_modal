{"version":3,"file":"static/js/500.367ed6bf.chunk.js","mappings":"0OAcMA,EAAU,CAEd,CAAEC,MAAO,YAAaC,WAAY,aAAcC,SAAU,IAAKC,KAAM,GACrE,CAAEH,MAAO,WAAYC,WAAY,YAAaC,SAAU,IAAKC,KAAM,GACnE,CACEH,MAAO,WACPC,WAAY,YACZG,WAAY,gBAAGC,EAAK,EAALA,MAAK,OAClBA,GAAQC,EAAAA,EAAAA,GAAO,IAAIC,KAAKF,GAAO,cAAiB,KAAK,EACvDG,KAAM,OACNN,SAAU,IACVC,KAAM,GAER,CACEH,MAAO,YACPC,WAAY,aACZG,WAAY,gBAAGC,EAAK,EAALA,MAAK,OAClBA,GAAQC,EAAAA,EAAAA,GAAO,IAAIC,KAAKF,GAAO,cAAiB,KAAK,EACvDG,KAAM,OACNN,SAAU,IACVC,KAAM,GAER,CAAEH,MAAO,SAAUC,WAAY,SAAUC,SAAU,IAAKC,KAAM,GAC9D,CAAEH,MAAO,OAAQC,WAAY,OAAQC,SAAU,IAAKC,KAAM,GAC1D,CAAEH,MAAO,OAAQC,WAAY,QAASC,SAAU,IAAKC,KAAM,GAC3D,CACEH,MAAO,UACPC,WAAY,WACZC,SAAU,IACVC,KAAM,GAER,CAAEH,MAAO,aAAcC,WAAY,aAAcC,SAAU,IAAKC,KAAM,IAyFxE,UA1Ec,WACZ,OAAgCM,EAAAA,EAAAA,UAAS,IAAG,eAArCC,EAAQ,KAAEC,EAAW,KAC5B,GAA0BF,EAAAA,EAAAA,UAAS,MAAK,eAAjCG,EAAK,KAAEC,EAAQ,KAEhBC,GAAOC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,SAASC,cAAc,IAS3DC,GAAOC,EAAAA,EAAAA,UACX,kBACEN,EAAKO,KAAI,SAACC,EAAKC,GAAE,MAAM,CACrBA,GAEEA,IAAMC,EAAAA,EAAAA,MACRC,UAAWH,EAAII,SAASD,UACxBE,SAAUL,EAAII,SAASC,SACvBC,SAAUN,EAAII,SAASE,SACvBC,UAAWP,EAAII,SAASG,UACxBC,OAAQR,EAAIS,QAAQD,OACpBE,KAAMV,EAAIS,QAAQC,KAClBC,QAASX,EAAIS,QAAQE,QACrBC,KAAMZ,EAAIS,QAAQf,MAAMkB,KACxBC,WAAYb,EAAIa,WACjB,GAAE,GACL,CAACrB,IAWH,OARAsB,EAAAA,EAAAA,YAAU,WACR,IACEC,aAAaC,QAAQ,YAAaC,KAAKC,UAAU1B,GAAO,GAG1D,CAFE,MAAOF,GACPC,EAASD,EACX,CACF,GAAG,CAACE,KAGF,gCACGF,IACC,iBAAK6B,UAAU,gBAAe,+BAAoB7B,EAAM8B,YAE1D,SAAC,IAAQ,CACPvB,KAAMA,EACNpB,QAASA,EACTW,SAAUA,EACViC,iBAAkB,SAACC,GAAW,OAAKjC,EAAYiC,EAAY,EAC3DC,mBAAoB,CAAC,GAAI,GAAI,GAAI,KACjCC,YAAU,EACVC,GAAI,CACFC,EAAG,EACHC,EAAG,EACHC,MAAO,WACPC,QAAS,UACTC,OAAQ,EACRC,YAAa,WACbC,aAAc,EACdC,WAAY,KAEdC,WAAY,CAAEC,QAASC,EAAAA,GACvBC,gBAAiB,CACfC,QAAS,CACPC,iBAAiB,EACjBC,iBAAkB,CAAEC,WAAY,WAM5C,C","sources":["pages/EmployeeList/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\n\nimport { useSelector } from \"react-redux\";\nimport { format } from \"date-fns\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { useMemo } from \"react\";\n\n/**\n * @description Array of objects representing the columns of the table.\n *\n * @type {Array}\n */\nconst columns = [\n  // { field: \"id\", headerName: \"Id\", minWidth: 50, flex: 1 },\n  { field: \"firstName\", headerName: \"First Name\", minWidth: 120, flex: 1 },\n  { field: \"lastName\", headerName: \"Last Name\", minWidth: 120, flex: 1 },\n  {\n    field: \"birthDay\",\n    headerName: \"Birth Day\",\n    renderCell: ({ value }) =>\n      value ? format(new Date(value), `LL/dd/yyyy`) : \"N/A\",\n    type: \"date\",\n    minWidth: 110,\n    flex: 1,\n  },\n  {\n    field: \"startDate\",\n    headerName: \"Start Date\",\n    renderCell: ({ value }) =>\n      value ? format(new Date(value), `LL/dd/yyyy`) : \"N/A\",\n    type: \"date\",\n    minWidth: 110,\n    flex: 1,\n  },\n  { field: \"street\", headerName: \"Street\", minWidth: 250, flex: 1 },\n  { field: \"city\", headerName: \"City\", minWidth: 120, flex: 1 },\n  { field: \"name\", headerName: \"State\", minWidth: 160, flex: 1 },\n  {\n    field: \"zipCode\",\n    headerName: \"Zip Code\",\n    minWidth: 100,\n    flex: 1,\n  },\n  { field: \"department\", headerName: \"Department\", minWidth: 150, flex: 1 },\n];\n\n/**\n * @description Renders a table with rows of employee data.\n *\n * @param {Object} state - The current state of the application.\n * @param {Array} state.employee.employeesArray - An array of employee objects.\n * @param {Object} options - The options object for the table.\n * @param {Number} options.pageSize - The number of rows to display on each page.\n * @param {function} options.setPageSize - A function to set the number of rows displayed per page.\n * @param {Function} options.onPageSizeChange - A callback function to be called when the page size changes.\n *\n * @returns {React.Component} The rendered table.\n */\nconst Table = () => {\n  const [pageSize, setPageSize] = useState(10);\n  const [error, setError] = useState(null);\n\n  const data = useSelector((state) => state.employee.employeesArray);\n\n  /**\n   * @description Returns an array of objects representing the rows of the table.\n   * The value is memoized with 'useMemo()' to avoid recalculating\n   * the array unless 'data' changes.\n   * @param {Array} data - An array of employee objects.\n   * @returns {Array} The array of rows.\n   */\n  const rows = useMemo(\n    () =>\n      data.map((obj, id) => ({\n        id:\n          /*If 'id' is undefined, a unique id is generated with nanoid() */\n          id || nanoid(),\n        firstName: obj.identity.firstName,\n        lastName: obj.identity.lastName,\n        birthDay: obj.identity.birthDay,\n        startDate: obj.identity.startDate,\n        street: obj.address.street,\n        city: obj.address.city,\n        zipCode: obj.address.zipCode,\n        name: obj.address.state.name,\n        department: obj.department,\n      })),\n    [data]\n  );\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"employees\", JSON.stringify(data), []);\n    } catch (error) {\n      setError(error);\n    }\n  }, [data]);\n\n  return (\n    <>\n      {error && (\n        <div className=\"error-message\">An error occured: {error.message}</div>\n      )}\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        pageSize={pageSize}\n        onPageSizeChange={(newPageSize) => setPageSize(newPageSize)}\n        rowsPerPageOptions={[10, 25, 50, 100]}\n        pagination\n        sx={{\n          p: 1,\n          m: 2,\n          color: \"grey.800\",\n          bgcolor: \"grey.50\",\n          border: 1,\n          borderColor: \"grey.100\",\n          borderRadius: 2,\n          fontWeight: 700,\n        }}\n        components={{ Toolbar: GridToolbar }}\n        componentsProps={{\n          toolbar: {\n            showQuickFilter: true,\n            quickFilterProps: { debounceMs: 500 },\n          },\n        }}\n      />\n    </>\n  );\n};\n\nexport default Table;\n"],"names":["columns","field","headerName","minWidth","flex","renderCell","value","format","Date","type","useState","pageSize","setPageSize","error","setError","data","useSelector","state","employee","employeesArray","rows","useMemo","map","obj","id","nanoid","firstName","identity","lastName","birthDay","startDate","street","address","city","zipCode","name","department","useEffect","localStorage","setItem","JSON","stringify","className","message","onPageSizeChange","newPageSize","rowsPerPageOptions","pagination","sx","p","m","color","bgcolor","border","borderColor","borderRadius","fontWeight","components","Toolbar","GridToolbar","componentsProps","toolbar","showQuickFilter","quickFilterProps","debounceMs"],"sourceRoot":""}